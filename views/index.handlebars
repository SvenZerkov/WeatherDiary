{{> header}}

<div class="container">


  <h1>Weather Diary</h1>

  {{#if desc}}
  <p>{{desc}}</p>
  {{else}}
  <p>No content</p>
  {{/if}}
  <p>
  <form action="/api/notes/" method="post">
    <label for="date">Choose date: </label><br>
    <input type="date" id="date" name="date">
    </p>
    <button onclick="showChosenDay()">View</button>

    <div class="row">
      <div class="col-sm-6">
        <h3>Weather history</h3>
        <p class="datevalue"></p>
        <table class="table table-bordered">
          <thead>
            <tr>
              <th>Date</th>
              <th>Temperature</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Temperature:</td>
              <td>{{weatherDetails.temperature}} &#8451;</td>
            </tr>
            <tr>
              <td>Sunrise: </td>
              <td>{{weatherDetails.sunrise}}</td>
            </tr>
            <tr>
              <td>Sunset: </td>
              <td>{{weatherDetails.sunset}}</td>
            </tr>
            <tr>
              <td>Precipitation: </td>
              <td>{{weatherDetails.precipitation}} &#109;&#109;</td>
            </tr>
            <tr>
              <td>Windspeed: </td>
              <td>{{weatherDetails.windspeed}} &#109; &#8725; &#115;</td>
            </tr>
          </tbody>
        </table>
      </div>

      <div class="col-sm-6">
        <h3>Personal entries</h3>
        <p class="datevalue"></p>
        <table id="scrollbar-table" class="table table-bordered">
          <thead id="scrollbar-thead">
            <tr>
              <th>Date</th>
              <th>Temperature</th>
              <th>Comments</th>
              <th></th>
            </tr>
          </thead>
          <tbody id="scrollbar-tbody">
            {{#each UserNotes}}
            <tr>
              <div class="note">
                <td>{{this.date}}</td>
                <td>{{this.temperature}} &#8451;</td>
                <td>{{this.comment}}</td>
              </div>
              <td><input type="button" class="btn btn-primary" aria-label="Update current note" id="updateNoteButton"
                  data-id="{{this._id}}" value="Update"><br><br>
                <input type="button" class="btn btn-danger" aria-label="Delete current note" id="deleteNoteButton"
                  data-id="{{this._id}}" value="Delete">
              </td>
            </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>
    <div class="col-sm-4"></div>
    <div class="col-sm-12 personaldiaryentry">
      <h3>Personal diary entries</h3>

      <table class="table table-bordered">
        <thead>
          <tr>
            <th>Date</th>
            <th><label for="temperature">Temperature</label></th>
            <th><label for="comment">Comments</label></th>
          </tr>
        </thead>
        <tbody>
          <tr>
            {{!-- <td><input type="date" id="date" name="date"></td> --}}
            <td>
              <p class="datevalue"></p>
            </td>
            <td>
              <input type="number" id="temperature" name="temperature" value="" min="-80" max="50" step="0.1">
            </td>
            {{!-- <span id="temperature-between" class="invalid-temperature">between -80 and 50.</span> --}}
            <td>
              <input type="text" id="comment" name="comment" value="" maxlength="200">
              <span id="comment-validation-max-character-amount" class="invalid-amount">Maximum amount of characters is
                200.</span>
            </td>
          </tr>
        </tbody>
      </table>
      <input type="submit" value="Submit">
  </form>
</div>

{{!-- delete modal --}}
<div id="confirm-delete" class="modal" role="dialog" aria-labelledby="confirm-deleteLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">Confirm delete</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">&times;</button>
      </div>
      <div class="modal-body">
        <p class="message"></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger yes-delete">Yes</button>
        <button type="button" class="btn btn-default no-delete" data-dismiss="modal">No</button>
      </div>
    </div>
  </div>
</div>

{{!-- update modal --}}
<div id="update-note-modal" class="modal" role="dialog" aria-labelledby="update-note-modalLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">Update Note</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">&times;</button>
      </div>
      <form id="updateNoteForm">
        <input type="number" id="updateTemperature" name="temperature" placeholder="Temperature">
        <textarea id="updateComment" name="comment" placeholder="Comment"></textarea>
        <button type="submit">Update</button>
      </form>

    </div>
  </div>
</div>

{{!-- update confirm modal --}}
<div id="confirm-update" class="modal" role="dialog" aria-labelledby="confirm-updateLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">Confirm update</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">&times;</button>
      </div>
      <div class="modal-body">
        <p class="message"></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger yes-update">Yes</button>
        <button type="button" class="btn btn-default no-update" data-dismiss="modal">No</button>
      </div>
    </div>
  </div>
</div>

{{!-- script for event listener on deleteButton --}}
<script>
  // dev section jquery test
  if (typeof jQuery == 'undefined') {
    console.log('jQuery is not loaded');
  } else {
    console.log('jQuery is loaded');
  };

  // function for confirming the delete
  const deleteConfirm = (msg) => {
    return new Promise((resolve, reject) => {
      const confirmBox = $("#confirm-delete");
      confirmBox.find(".message").text(msg);
      confirmBox.find(".yes-delete").click(() => {
        confirmBox.hide();
        resolve();
      });
      confirmBox.find(".no-delete").click(() => {
        confirmBox.hide();
        reject();
      });
      confirmBox.find(".close").click(() => {
        confirmBox.hide();
        reject();
      });
      confirmBox.show();
      confirmBox.find(".yes-delete").attr("tabindex", "0").focus();
    });
  };

  // function for deleting the note
  const deleteNote = async (noteId) => {
    try {
      const response = await axios.delete(`http://localhost:3000/api/notes/${noteId}`);
      console.log(response.data);
    } catch (error) {
      console.error(error.response.data);
    }
  };

  // del eventlistener
  const deleteButtons = document.querySelectorAll("#deleteNoteButton");
  deleteButtons.forEach((deleteButton) => {
    deleteButton.addEventListener("click", (event) => {
      const noteId = event.target.dataset.id;
      console.log("Delete button clicked. Note id is: ", noteId);
      deleteConfirm("Do you want to delete the current note?")
        .then(() => {
          const deleteModal = document.querySelector("#confirm-delete");
          if (deleteModal) {
            deleteModal.addEventListener("shown.bs.modal", () => {
              deleteModal.querySelector(".btn-primary").focus();
            });

          }
          deleteNote(noteId);
        })
        .catch((error) => {
          if (error) {
            console.error(error);
          } else {
            console.log("Deletion canceled.");
          }
        });
    });
  });
</script>

{{!-- script for event listener on update button --}}
<script>
  // func to confirm update
  const updateConfirm = (msg) => {
    return new Promise((resolve, reject) => {
      const confirmBox = $("#confirm-update");
      confirmBox.find(".message").text(msg);
      confirmBox.find(".yes-update").click(() => {
        confirmBox.hide();
        $('#update-note-modal').modal('hide');
        resolve();
      });
      confirmBox.find(".no-update").click(() => {
        confirmBox.hide();
        $('#update-note-modal').modal('hide');
        reject();
      });
      confirmBox.find(".close").click(() => {
        confirmBox.hide();
        $('#update-note-modal').modal('hide');
        reject();
      });
      confirmBox.show();
      confirmBox.find(".yes-update").attr("tabindex", "0").focus();
    });
  };

  // func to update note
  const updateNote = async (confirmed, noteId, noteData) => {
    console.log("Note data passed to updateNote: ", noteData);
    console.log(`Note id received in updateNote function: ${noteId}`);
    if (confirmed) {
      try {
        const response = await fetch(`http://localhost:3000/api/notes/${noteId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(noteData)
        });

        if (response.ok) {
          const data = await response.json();
          console.log(`Note updated, ${data}`);
        } else {
          console.error(`HTTP error: ${response.status}`);
        }

      } catch (error) {
        console.error(error);
      }

    } else {
      console.log("update canceled");
    }
  };

  // update event listener

  const updateButtons = document.querySelectorAll("#updateNoteButton");
  updateButtons.forEach((updateButton) => {
    updateButton.addEventListener("click", async (event) => {
      const noteId = event.target.dataset.id;
      console.log("Update button clicked. Note id is: ", noteId);
      const response = await fetch(`/api/notes/${noteId}`);
      const noteData = await response.json();
      console.log("note data at this point: ", noteData);

      const updateTemperatureInput = document.getElementById('updateTemperature');
      const updateCommentInput = document.getElementById('updateComment');

      updateTemperatureInput.value = noteData.temperature;
      updateCommentInput.value = noteData.comment;

      const updateNoteForm = document.getElementById("updateNoteForm");
      updateNoteForm.dataset.id = noteId;

      $('#update-note-modal').modal('show').on('shown.bs.modal', function () {
        $('#updateTemperature').focus();
      });


    });

  });
  const updateNoteForm = document.getElementById("updateNoteForm");
  updateNoteForm.addEventListener("submit", async (event) => {
    event.preventDefault();
    const noteId = event.target.dataset.id;
    console.log("Note id inside noteForm is: ", noteId);
    const updateTemperatureInput = document.getElementById('updateTemperature');
    const updateCommentInput = document.getElementById('updateComment');

    const noteData = {
      temperature: updateTemperatureInput.value,
      comment: updateCommentInput.value
    };

    updateConfirm("Do you really want to update this note?")
      .then(() => {
        const updateConfModal = document.querySelector("#confirm-update");
        if (updateConfModal) {
          updateConfModal.addEventListener("shown.bs.modal", () => {
            updateConfModal.querySelector(".btn-primary").focus();
          });
          updateNote(true, noteId, noteData);
        }

      })
      .catch((error) => {
        if (error) {
          console.error(error);
        } else {
          updateNote(false);
        }
      });
  });

</script>

{{!-- Script for showing chosen day in html --}}
<script>
  function showChosenDay() {
    let MyDate = document.getElementById("date").value;
    //console.log(MyDate);
    // slicing the date, to show in right format
    let year = String(MyDate).slice(0, 4);
    //console.log(year);
    let month = String(MyDate).slice(5, 7);
    //console.log(month);
    let day = String(MyDate).slice(8, 10);
    //console.log(day);
    let formatDate = day + "." + month + "." + year;
    //console.log(formatDate);
    const collection = document.getElementsByClassName("datevalue");
    collection[0].innerHTML = formatDate;
    collection[1].innerHTML = formatDate;
    collection[2].innerHTML = formatDate;
  }
</script>


{{!-- Temperature-kentän validointi - Lämpötilan on oltava -80 ja 50 välillä. --}}
<script>
  const form = document.querySelector('form');
  const temperatureInput = document.getElementById('temperature');
  const temperatureFalse = document.getElementById('temperature-false');
  form.addEventListener('submit', (event) => {
    if (!temperatureInput.checkValidity()) {
      temperatureFalse.style.display = 'block';
      event.preventDefault();
    } else {
      temperatureFalse.style.display = 'none';
    }
  });
</script>

{{!-- Päivämäärän maksimiarvon asettaminen sivun lataamispäivään --}}
<script>
  const currentDate = new Date().toISOString().split("T")[0];
  document.getElementById("date").setAttribute("max", currentDate);
</script>


</div>