{{> header}}

<div class="container">


  {{!-- <h1>Weather Diary</h1> --}}

  {{#if desc}}
    <p class="text-center ">{{desc}}</p>
  {{else}}
    <p>No content</p>
  {{/if}}
  <p>
  <div class="date-view-container">
    <form id="dateButton" name="dateButton" action="/" method="post">
    <label for="date" class="label-lg">Choose date: </label>
    <input type="date" class="input-lg" id="date" name="date"> 
   <button onclick="showChosenDay()" type="submit" class="btn btn-lg">View</button></form>
   </form>
   </div>
   </p>
    
    <div class="row">
      <hr>
      <div class="col-sm-12">
        <h3 class="text-center">Weather history</h3>
        <th><p>{{Date}}</p></th>
        <table class="table table-bordered">
      <tbody>
        <tr>
          <td>Temperature:</td>
          <td>{{weatherDetails.temperature}}</td>
        </tr>
        <tr>
          <td>Sunrise: </td>
          <td>{{weatherDetails.sunrise}}</td>
        </tr>
        <tr>
          <td>Sunset: </td>
          <td>{{weatherDetails.sunset}}</td>
        </tr>
        <tr>
          <td>Precipitation: </td>
          <td>{{weatherDetails.precipitation}}</td>
        </tr>
        <tr>
          <td>Windspeed: </td>
          <td>{{weatherDetails.windspeed}}</td>
        </tr>
      </tbody>
      </table>
    </div>
    <div class="col-sm-12">
      <h3 class="text-center">Personal entries</h3>
      <p>{{Date}}</p>
      <table id="scrollbar-table" class="table table-bordered">
        <thead id="scrollbar-thead">
          <tr>
            <th>Date</th>
            <th>Temperature</th>
            <th>Comments</th>
          </tr>
        </thead>
        <tbody id="scrollbar-tbody">
          {{#each UserNotes}}
          <tr>
            <div class="note">
              <td>{{this.date}}</td>
              <td>{{this.temperature}} &#8451;</td>
              <td>{{this.comment}}</td>
            </div>
            <td><input type="button" class="btn btn-primary" aria-label="Update current note" id="updateNoteButton"
                  data-id="{{this._id}}" value="Update"><br><br>
                <input type="button" class="btn btn-danger" aria-label="Delete current note" id="deleteNoteButton"
                  data-id="{{this._id}}" value="Delete">
              </td>
          </tr>
          {{/each}}
        </tbody>
      </table>
    </div>
</div>
<div class="col-sm-4"></div>
<div class="col-sm-12 personaldiaryentry">
  <hr>
  <h3>Personal diary entries</h3>

  <table class="table table-bordered">
    <thead>
      <tr>
        <th>Date</th>
        <th><label for="temperature">Temperature</label></th>
        <th><label for="comment">Comments</label></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        {{!-- <td><input type="date" id="date" name="date"></td> --}}
        <td>
          <p>{{Date}}</p>
        </td>
        <td>
          <input type="number" id="temperature" name="temperature" value="" min="-80" max="50" step="0.1">
        </td>
        {{!-- <span id="temperature-between" class="invalid-temperature">between -80 and 50.</span> --}}
        <td>
          <input type="text" id="comment" name="comment" value="" maxlength="200">
          <span id="comment-validation-max-character-amount" class="invalid-amount">Maximum amount of characters is
            200.</span>
        </td>
      </tr>
    </tbody>
  </table>
  <input type="submit" value="Submit">
  </form>
</div>

{{!-- delete modal --}}
<div id="confirm-delete" class="modal" role="dialog" aria-labelledby="confirm-deleteLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">Confirm delete</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">&times;</button>
      </div>
      <div class="modal-body">
        <p class="message"></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger yes-delete">Yes</button>
        <button type="button" class="btn btn-default no-delete" data-dismiss="modal">No</button>
      </div>
    </div>
  </div>
</div>

{{!-- update modal --}}
<div id="update-note-modal" class="modal" role="dialog" aria-labelledby="update-note-modalLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">Update Note</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">&times;</button>
      </div>
      <form id="updateNoteForm">
        <input type="number" id="updateTemperature" name="temperature" placeholder="Temperature">
        <textarea id="updateComment" name="comment" placeholder="Comment"></textarea>
        <button type="submit">Update</button>
      </form>

    </div>
  </div>
</div>

{{!-- update confirm modal --}}
<div id="confirm-update" class="modal" role="dialog" aria-labelledby="confirm-updateLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">Confirm update</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">&times;</button>
      </div>
      <div class="modal-body">
        <p class="message"></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger yes-update">Yes</button>
        <button type="button" class="btn btn-default no-update" data-dismiss="modal">No</button>
      </div>
    </div>
  </div>
</div>

{{!-- script for event listener on deleteButton --}}
<script>
  // dev section jquery test
  if (typeof jQuery == 'undefined') {
    console.log('jQuery is not loaded');
  } else {
    console.log('jQuery is loaded');
  };

  // function for confirming the delete
  const deleteConfirm = (msg) => {
    return new Promise((resolve, reject) => {
      const confirmBox = $("#confirm-delete");
      confirmBox.find(".message").text(msg);
      confirmBox.find(".yes-delete").click(() => {
        confirmBox.hide();
        resolve();
      });
      confirmBox.find(".no-delete").click(() => {
        confirmBox.hide();
        reject();
      });
      confirmBox.find(".close").click(() => {
        confirmBox.hide();
        reject();
      });
      confirmBox.show();
      confirmBox.find(".yes-delete").attr("tabindex", "0").focus();
    });
  };

  // function for deleting the note
  const deleteNote = async (noteId) => {
    try {
      const response = await axios.delete(`http://localhost:3000/api/notes/${noteId}`);
      console.log(response.data);
    } catch (error) {
      console.error(error.response.data);
    }
  };

  // del eventlistener
  const deleteButtons = document.querySelectorAll("#deleteNoteButton");
  deleteButtons.forEach((deleteButton) => {
    deleteButton.addEventListener("click", (event) => {
      const noteId = event.target.dataset.id;
      console.log("Delete button clicked. Note id is: ", noteId);
      deleteConfirm("Do you want to delete the current note?")
        .then(() => {
          const deleteModal = document.querySelector("#confirm-delete");
          if (deleteModal) {
            deleteModal.addEventListener("shown.bs.modal", () => {
              deleteModal.querySelector(".btn-primary").focus();
            });

          }
          deleteNote(noteId);
        })
        .catch((error) => {
          if (error) {
            console.error(error);
          } else {
            console.log("Deletion canceled.");
          }
        });
    });
  });
</script>

{{!-- script for event listener on update button --}}
<script>
  const updateConfirm = (msg) => {
    return new Promise((resolve, reject) => {
      const confirmBox = $("#confirm-update");
      confirmBox.find(".message").text(msg);
      confirmBox.find(".yes-update").click(() => {
        confirmBox.hide();
        resolve();
      });
      confirmBox.find(".no-update").click(() => {
        confirmBox.hide();
        reject();
      });
      confirmBox.show();
    });
  };
  const updateNote = () => {
    console.log("note updated");
    // send req to server for updating note
  };
  // const updateButton = document.getElementById("updateNoteButton");
  /*
  updateButton.addEventListener("click", async event => {
    event.preventDefault();
 
    const noteID = updateButton.dataset.id;
    const note = await getNoteById(noteID);
 
    const updateNoteForm = document.querySelector("#updateNoteForm");
    updateNoteForm.title.value = note.title;
    updateNoteForm.body.value = note.body;
  });
 
  const getNoteById = async (id) => {
    const response = await fetch(`/api/notes/${id}`);
    const note = await response.json();
    return note;
  };
  */
  const updateButtons = document.querySelectorAll("#updateNoteButton");
  updateButtons.forEach((updateButton) => {
    updateButton.addEventListener("click", event => {
      const noteId = event.target.dataset.id;
      console.log("Update button clicked. Note id is: ", noteId);
    });
    /*
    updateConfirm("Do you want to update the current note?")
      .then(updateNote)
      .catch((error) => {
        if (error) {
          console.log(error);
        } else {
          console.log("Update canceled.")
        }
      });
    */
  });
</script>


{{!-- Temperature-kentän validointi - Lämpötilan on oltava -80 ja 50 välillä. --}}
<script>
  const form = document.querySelector('form');
  const temperatureInput = document.getElementById('temperature');
  const temperatureFalse = document.getElementById('temperature-false');
  form.addEventListener('submit', (event) => {
    if (!temperatureInput.checkValidity()) {
      temperatureFalse.style.display = 'block';
      event.preventDefault();
    } else {
      temperatureFalse.style.display = 'none';
    }
  });
</script>

{{!-- Päivämäärän maksimiarvon asettaminen sivun lataamispäivään --}}
<script>
  const currentDate = new Date().toISOString().split("T")[0];
  document.getElementById("date").setAttribute("max", currentDate);
</script>


</div>
